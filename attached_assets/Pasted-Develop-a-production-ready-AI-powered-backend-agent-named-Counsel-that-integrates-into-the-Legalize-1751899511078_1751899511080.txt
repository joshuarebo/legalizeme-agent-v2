Develop a production-ready, AI-powered backend agent named Counsel that integrates into the LegalizeMe platform at https://www.legalizeme.site/counsel. This agent will:

Use Claude Sonnet 4 via Amazon Bedrock for inference.

Leverage open-source fallback LLMs like Hunyuan-A13B or MiniMax-01.

Crawl & parse Kenya Law and Parliament websites to answer legal queries.

Generate and summarize legal documents.

Store legal knowledge in a vector store (RAG memory).

Be ready for frontend integration, CI/CD deployment, and Dockerization.

🔧 AI Backend Development Checklist
1. 📦 Backend Architecture
 Use FastAPI for REST API endpoints (/query, /summarize, /generate-doc, /fetch-law)

 Modularize with folders: backend/, utils/, retriever/, llm/, crawler/

 Build LLM manager to route queries to:

 Claude Sonnet 4 (via Bedrock)

 OSS fallback models (loaded locally)

 Add a RAG retriever layer:

 Use Qdrant or Weaviate as a vector store.

 Embed using sentence-transformers/all-MiniLM-L6-v2

2. 🌐 Data Crawling + Legal Knowledge Injection
 Build web scrapers for:

 new.kenyalaw.org/judgments

 new.kenyalaw.org/legislation

 new.kenyalaw.org/gazettes

 www.parliament.go.ke

 Parse and store relevant case law, publications, and statutes.

 Add automatic PDF parsing support for judgments and gazettes (e.g., using PyMuPDF or pdfplumber).

3. 🧠 Agentic RAG Logic
 Use LangChain to:

 Embed parsed documents and store in vector DB

 Retrieve top-K relevant chunks on query

 Inject context dynamically into LLM prompts

 Answer should reflect up-to-date Kenyan law context.

4. 🔐 Secrets & Configuration
 Use .env to manage:

 AWS_ACCESS_KEY_ID

 AWS_SECRET_ACCESS_KEY

 CLAUDE_MODEL_ID

 QDRANT_URL, QDRANT_API_KEY (if hosted)

 Store these securely in GitHub Secrets or Replit secrets tab.

5. 🧪 Testing Suite
 Write unit tests for:

 Model invocation

 Web crawling/parsing

 API responses

 RAG context injection

 Use pytest and automate via CI pipeline

6. 🔄 CI/CD Pipeline (GitHub Actions)
 Create a .github/workflows/deploy.yml that:

 Installs dependencies

 Runs lint checks & tests

 Builds and pushes Docker image to Docker Hub or AWS ECR

 Deploys to Replit, Railway, EC2, or Lambda (choose 1)

7. 🐳 Dockerization
 Write a Dockerfile that:

 Installs FastAPI app and Python deps

 Sets up Uvicorn as entrypoint

 Include docker-compose.yml (optional) for local Qdrant setup

8. 🌐 Frontend Integration (Built with Jess)
 Expose the following REST endpoints:

/query → receives a legal query, returns model response

/summarize → receives legal content, returns summary

/generate-doc → receives doc template request, returns full doc

/fetch-law → scrapes Kenya Law and Parliament and returns matching docs

 Add CORS headers to allow requests from:

https://www.legalizeme.site

9. 🧠 Future-Ready OSS Fine-Tuning (Optional)
 Preprocess Kenyan case law documents into JSONL format

 Fine-tune Hunyuan-A13B using Hugging Face Trainer

 Add inference endpoints for these models under /oss-query, /oss-doc

10. ✅ Final Delivery Check
 All API endpoints functional and tested

 API base URL (/counsel) ready for integration

 Frontend engineer has:

 API docs (or Swagger auto-gen via FastAPI)

 Sample Postman collection

 Docker image or live URL for backend

